name: Build and Push to Quantum Forge

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: registry.quantum-forge.net
  PROJECT: library
  IMAGE_NAME: a2a-server
  CHART_PATH: chart/a2a-server
  CHART_VERSION: 0.1.0

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Run pytest
        run: |
          python -m pytest tests/ -v --cov=a2a_server --cov-report=xml --cov-report=term

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Quantum Forge Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.QUANTUM_FORGE_USERNAME }}
          password: ${{ secrets.QUANTUM_FORGE_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.PROJECT }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}

      - name: Output image details
        run: |
          echo "### Docker Image Built and Pushed 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.PROJECT }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  package-and-push-helm:
    name: Package and Push Helm Chart
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'

      - name: Log in to Quantum Forge Registry (Helm)
        run: |
          echo "${{ secrets.QUANTUM_FORGE_PASSWORD }}" | helm registry login ${{ env.REGISTRY }} \
            --username ${{ secrets.QUANTUM_FORGE_USERNAME }} \
            --password-stdin

      - name: Update Helm chart values
        run: |
          VERSION="${{ needs.build-and-push.outputs.version }}"
          sed -i "s|repository:.*a2a-server.*|repository: ${{ env.REGISTRY }}/${{ env.PROJECT }}/${{ env.IMAGE_NAME }}|g" ${{ env.CHART_PATH }}/values.yaml
          sed -i "s|tag:.*\".*\"|tag: \"${VERSION}\"|g" ${{ env.CHART_PATH }}/values.yaml
          
          echo "Updated values.yaml:"
          grep -A 3 "image:" ${{ env.CHART_PATH }}/values.yaml

      - name: Build Helm dependencies
        run: |
          cd ${{ env.CHART_PATH }}
          helm dependency build
          cd ../..

      - name: Package Helm chart
        run: |
          helm package ${{ env.CHART_PATH }}
          ls -lh *.tgz

      - name: Push Helm chart
        run: |
          helm push a2a-server-${{ env.CHART_VERSION }}.tgz oci://${{ env.REGISTRY }}/${{ env.PROJECT }}

      - name: Output chart details
        run: |
          echo "### Helm Chart Packaged and Pushed 📦" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** oci://${{ env.REGISTRY }}/${{ env.PROJECT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Chart:** a2a-server" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ env.CHART_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image Version:** ${{ needs.build-and-push.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Install Command:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "helm upgrade --install a2a-server \\" >> $GITHUB_STEP_SUMMARY
          echo "  oci://${{ env.REGISTRY }}/${{ env.PROJECT }}/a2a-server \\" >> $GITHUB_STEP_SUMMARY
          echo "  --version ${{ env.CHART_VERSION }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  --namespace a2a-system \\" >> $GITHUB_STEP_SUMMARY
          echo "  --create-namespace" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  deploy-notification:
    name: Deployment Ready Notification
    runs-on: ubuntu-latest
    needs: [build-and-push, package-and-push-helm]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Create deployment summary
        run: |
          echo "# 🎉 Ready to Deploy to acp.quantum-forge.net" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Docker image and Helm chart have been successfully built and pushed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Option 1: Quick Deploy (Recommended)" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Login to registry" >> $GITHUB_STEP_SUMMARY
          echo "helm registry login ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Deploy using local script" >> $GITHUB_STEP_SUMMARY
          echo "./quick-deploy-acp.sh" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Option 2: Manual Helm Deploy" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Create namespace" >> $GITHUB_STEP_SUMMARY
          echo "kubectl create namespace a2a-system" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Deploy with Helm" >> $GITHUB_STEP_SUMMARY
          echo "helm upgrade --install a2a-server \\" >> $GITHUB_STEP_SUMMARY
          echo "  oci://${{ env.REGISTRY }}/${{ env.PROJECT }}/a2a-server \\" >> $GITHUB_STEP_SUMMARY
          echo "  --version ${{ env.CHART_VERSION }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  --namespace a2a-system \\" >> $GITHUB_STEP_SUMMARY
          echo "  --set image.tag=${{ needs.build-and-push.outputs.version }} \\" >> $GITHUB_STEP_SUMMARY
          echo "  --set ingress.enabled=true \\" >> $GITHUB_STEP_SUMMARY
          echo "  --set ingress.hosts[0].host=acp.quantum-forge.net \\" >> $GITHUB_STEP_SUMMARY
          echo "  --set service.type=LoadBalancer \\" >> $GITHUB_STEP_SUMMARY
          echo "  --wait --timeout 10m" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Post-Deployment Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Get LoadBalancer IP: \`kubectl get svc -n a2a-system a2a-server\`" >> $GITHUB_STEP_SUMMARY
          echo "2. Configure DNS: Point \`acp.quantum-forge.net\` to the LoadBalancer IP" >> $GITHUB_STEP_SUMMARY
          echo "3. Wait for TLS certificate (2-5 minutes)" >> $GITHUB_STEP_SUMMARY
          echo "4. Verify: https://acp.quantum-forge.net/health" >> $GITHUB_STEP_SUMMARY
          echo "5. Monitor: https://acp.quantum-forge.net/v1/monitor/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Endpoints" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Monitoring UI: https://acp.quantum-forge.net/v1/monitor/" >> $GITHUB_STEP_SUMMARY
          echo "- 📡 Agent Card: https://acp.quantum-forge.net/.well-known/agent-card.json" >> $GITHUB_STEP_SUMMARY
          echo "- 🔧 MCP Tools: https://acp.quantum-forge.net:9000/mcp/v1/tools" >> $GITHUB_STEP_SUMMARY
          echo "- ❤️ Health: https://acp.quantum-forge.net/health" >> $GITHUB_STEP_SUMMARY
